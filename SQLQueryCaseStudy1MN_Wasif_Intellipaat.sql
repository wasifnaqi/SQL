CREATE DATABASE apr26th
USE apr26th 
SELECT * FROM fact
SELECT * FROM product
SELECT * FROM location 

--1. Display the number of states present in the LocationTable.

SELECT COUNT(DISTINCT(State)) AS number_of_states 
FROM location;

--2. How many products are of regular type?

SELECT COUNT(Type) AS no_of_regular_type
FROM product 
WHERE Type = 'Regular';

--3. How much spending has been done on marketing of product ID 1?

SELECT SUM(Marketing) AS Marketing_spend 
FROM fact 
WHERE ProductID = 1;

--4. What is the minimum sales of products?

SELECT MIN(Sales) AS min_sales 
FROM fact; 

--5. Display the max Cost of Good Sold (COGS).

SELECT MAX(COGS) AS MAX_COGS 
FROM fact; 

--6. Display the details of the product where product type is coffee.

SELECT *
FROM product
WHERE Product_Type = 'Coffee';

--7. Display the details where total expenses are greater than 40.

SELECT *
FROM fact
WHERE Total_Expenses > 40;

--8. What is the average sales in area code 719?

SELECT AVG(Sales) AS avg_sales 
FROM fact
WHERE Area_Code = 719;

--9. Find out the total profit generated by Colorado state.

SELECT SUM(Profit) AS total_profit 
FROM fact f
INNER JOIN location l ON f.ARea_Code = l.Area_Code
WHERE l.State = 'Colorado';

--10. Display the average inventory for each product ID.

SELECT ProductID, 
	   AVG(Inventory) AS avg_inventory FROM fact
GROUP BY ProductID 
ORDER BY ProductID;

--11. Display state in a sequential order in a Location Table.

SELECT State 
FROM location
ORDER BY State; 

SELECT DISTINCT(State) 
FROM location; 

--12. Display the average budget of the Product where the average budget margin should be greater than 100.

SELECT ProductID, 
	   AVG(Budget_Margin) AS avg_budget_margin 
FROM fact
GROUP BY ProductID HAVING AVG(Budget_Margin) > 100
ORDER BY ProductID;

--13. What is the total sales done on date 2010-01-01?

SELECT SUM(Sales) as total_sales 
FROM fact
WHERE Date = '2010-01-01';

--14. Display the average total expense of each product ID on an individual date.

SELECT ProductID, 
	   Date, 
	   AVG(Total_Expenses) AS avg_total_expenses 
FROM fact
GROUP BY ProductId, Date  
ORDER BY Date; 

--15. Display the table with the following attributes such as date, product ID, product_type, product, sales, profit, state, area_code.

SELECT date, 
	   f.ProductID, 
	   Product_Type, 
	   Product, 
	   Sales, 
	   Profit, 
	   State, 
	   f.Area_Code
FROM fact f
INNER JOIN product p ON f.ProductId = p.ProductId
INNER JOIN location l ON f.Area_Code =  l.Area_Code;

--16. Display the rank without any gap to show the sales wise rank.

SELECT DENSE_RANK() OVER (ORDER BY Sales desc) AS rank_with_no_gap,
	   Sales
FROM fact; 

--17. Find the state wise profit and sales.

SELECT State,
	   SUM(Sales)  AS total_sales,
	   SUM(Profit) AS total_profit	    
FROM fact f
INNER JOIN location l ON f.Area_Code = l.Area_Code
GROUP BY State;

--18. Find the state wise profit and sales along with the product name.

SELECT State,
	   Product,
	   SUM(Sales)  AS total_sales,
	   SUM(Profit) AS total_profit	    
FROM fact f
INNER JOIN location l ON f.Area_Code = l.Area_Code
INNER JOIN product p ON f.ProductId = p.ProductId
GROUP BY State, Product;

--19. If there is an increase in sales of 5%, calculate the increased sales.

SELECT Sales,
	   (Sales*0.05) AS Five_percent_inc,
	   (Sales * 1.05) AS Increased_sales
FROM fact; 

select Sales,Sales*0.05 as fiveper,Sales*1.05 as increasedSales from fact

--20. Find the maximum profit along with the product ID and producttype.

SELECT MAX(Profit) OVER (ORDER BY Profit) AS max_profit,
	   f.ProductID, 
	   p.Product_Type	   
FROM fact f
INNER JOIN product p ON f.ProductID = p.ProductId;

--21. Create a stored procedure to fetch the result according to the product type from Product Table.

CREATE PROCEDURE ptype 
@prod_type VARCHAR(20)

AS

SELECT * 
FROM product 
WHERE product_type=@prod_type

EXEC ptype @prod_type= 'Coffee'


--22. Write a query by creating a condition in which if the total expenses is less than 60 then it is a profit or else loss.

SELECT Total_Expenses, 
	   CASE WHEN Total_Expenses<60 THEN 'Profit' ELSE 'Loss' END AS Net_Result 
FROM fact;

--23. Give the total weekly sales value with the date and product ID details. Use roll-up to pull the data in hierarchical order.

SELECT
    DATEPART(week, date) AS WeekNumber,
    date,
    ProductId,
    SUM(Sales) AS TotalSales
FROM fact
GROUP BY ROLLUP(DATEPART(week, date), Date, ProductId)
ORDER BY WeekNumber, Date, ProductId;

--24. Apply union and intersection operator on the tables which consist of attribute area code.

SELECT Area_Code FROM fact
UNION ALL
SELECT Area_Code FROM location;

SELECT Area_Code FROM fact
INTERSECT
SELECT Area_Code FROM location;

--25. Create a user-defined function for the product table to fetch a particular product type based upon the user’s preference.

CREATE FUNCTION udf_Get_Product_By_Type 
(
@prod_type VARCHAR(50)
)
RETURNS TABLE
AS
RETURN
(
    SELECT * 
    FROM product
    WHERE Product_Type = @prod_type
);

SELECT * FROM dbo.udf_Get_Product_By_Type('Coffee');

--26. Change the product type from coffee to tea where product ID is 1 and undo it.

Begin Transaction;
UPDATE product
SET Product_Type = 'Tea'
WHERE ProductID = 1;

Select * from Product where ProductID =1

ROLLBACK TRANSACTION;

Select * from Product where ProductID =1

--27. Display the date, product ID and sales where total expenses are between 100 to 200.

SELECT date,
	   ProductId,
	   Sales
FROM fact
WHERE Total_Expenses BETWEEN 100 AND 200;

--28. Delete the records in the Product Table for regular type.

DELETE 
FROM product
WHERE Type = 'Regular';

--29. Display the ASCII value of the fifth character from the columnProduct.

SELECT ASCII(SUBSTRING(Product, 5, 1)) AS fifth_char_from_product_column
FROM product;  
